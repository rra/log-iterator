#!/usr/bin/perl
#
# Test Perl code for strict, warnings, syntax, and test coverage.
#
# Test coverage checking is disabled unless RRA_MAINTAINER_TESTS is set since
# it takes a long time, is sensitive to the versions of various libraries,
# and will not interfere with functionality.
#
# Written by Russ Allbery <rra@stanford.edu>
# Copyright 2013
#     The Board of Trustees of the Leland Stanford Junior University
#
# See LICENSE for licensing terms.

use autodie;
use strict;
use warnings;

use File::Spec;
use Test::More;

# Coverage level achieved.
use constant COVERAGE_LEVEL => 100;

# Directories containing non-fuctional, generic tests to skip for test
# coverage analysis.  Also skip the examples directory since Test::Script::Run
# does not play well with coverage analysis.
use constant COVERAGE_SKIP_TESTS => (qw(docs examples style));

# Skip tests if Test::Strict is not installed.
if (!eval { require Test::Strict }) {
    plan skip_all => 'Test::Strict required to test Perl syntax';

    # Suppress "only used once" warnings.
    $Test::Strict::TEST_SKIP           = [];
    $Test::Strict::TEST_WARNINGS       = 0;
    $Test::Strict::DEVEL_COVER_OPTIONS = q{};
}
Test::Strict->import;

# Test everything in the distribution directory except the Build and
# Makefile.PL scripts generated by Module::Build.  We also want to check use
# warnings.
$Test::Strict::TEST_SKIP = ['Build', 'Makefile.PL'];
$Test::Strict::TEST_WARNINGS = 1;
all_perl_files_ok(File::Spec->curdir);

# Test code coverage.  Skip this test unless we're running the test suite in
# maintainer mode.
SKIP: {
    if (!$ENV{RRA_MAINTAINER_TESTS}) {
        skip 'Coverage test only run for maintainer', 1;
    }
    if (!eval { require Devel::Cover }) {
        skip 'Devel::Cover required to check test coverage', 1;
    }

    # Build a list of test directories to use for coverage.
    my %ignore = map { $_ => 1 } COVERAGE_SKIP_TESTS;
    opendir my $testdir, q{t};
    my @t_dirs = grep { !$ignore{$_} } readdir $testdir;
    closedir $testdir;
    @t_dirs
      = map { File::Spec->catfile(q{t}, $_) } File::Spec->no_upwards(@t_dirs);

    # Disable POD coverage; that's handled separately and is confused by our
    # autoloading.
    $Test::Strict::DEVEL_COVER_OPTIONS
      = '-coverage,statement,branch,condition,subroutine';

    # Do the coverage analysis.
    all_cover_ok(COVERAGE_LEVEL, @t_dirs);
}
